[0.000000] (-) TimerEvent: {}
[0.001591] (-) JobUnselected: {'identifier': 'broadcaster'}
[0.002250] (-) JobUnselected: {'identifier': 'launch_car'}
[0.002464] (-) JobUnselected: {'identifier': 'lidar'}
[0.003179] (-) JobUnselected: {'identifier': 'lidar_control'}
[0.003431] (-) JobUnselected: {'identifier': 'listener'}
[0.003628] (-) JobUnselected: {'identifier': 'realsense_control'}
[0.003866] (-) JobUnselected: {'identifier': 'velodyne'}
[0.004029] (-) JobUnselected: {'identifier': 'velodyne_driver'}
[0.004248] (-) JobUnselected: {'identifier': 'velodyne_laserscan'}
[0.004783] (-) JobUnselected: {'identifier': 'velodyne_msgs'}
[0.004978] (-) JobUnselected: {'identifier': 'velodyne_pointcloud'}
[0.005080] (-) JobUnselected: {'identifier': 'xbox'}
[0.005239] (plane_fitter) JobQueued: {'identifier': 'plane_fitter', 'dependencies': OrderedDict()}
[0.005380] (plane_fitter) JobStarted: {'identifier': 'plane_fitter'}
[0.045670] (plane_fitter) JobProgress: {'identifier': 'plane_fitter', 'progress': 'cmake'}
[0.050021] (plane_fitter) JobProgress: {'identifier': 'plane_fitter', 'progress': 'build'}
[0.054119] (plane_fitter) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/nvidia/master_ws/build/plane_fitter', '--', '-j4', '-l4'], 'cwd': '/home/nvidia/master_ws/build/plane_fitter', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'nvidia'), ('SSH_CLIENT', '192.168.50.129 64515 22'), ('XDG_SESSION_TYPE', 'tty'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/opt/ros/foxy/opt/yaml_cpp_vendor/lib:/opt/ros/foxy/opt/rviz_ogre_vendor/lib:/opt/ros/foxy/lib/aarch64-linux-gnu:/opt/ros/foxy/lib:/usr/local/cuda-11.4/lib64:'), ('MOTD_SHOWN', 'pam'), ('HOME', '/home/nvidia'), ('OLDPWD', '/home/nvidia'), ('SSH_TTY', '/dev/pts/0'), ('JETSON_L4T', '35.3.1'), ('ROS_PYTHON_VERSION', '3'), ('JETSON_MODEL', 'NVIDIA Jetson Xavier NX Developer Kit'), ('LC_CTYPE', 'C.UTF-8'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('_colcon_cd_root', '/opt/ros/foxy/'), ('ROS_DISTRO', 'foxy'), ('LOGNAME', 'nvidia'), ('JETSON_MODULE', 'NVIDIA Jetson Xavier NX'), ('JETSON_SERIAL_NUMBER', '1422421040635'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('JETSON_CODENAME', 'Jakku'), ('XDG_SESSION_CLASS', 'user'), ('TERM', 'xterm-256color'), ('XDG_SESSION_ID', '3'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/home/nvidia/.local/bin:/opt/ros/foxy/bin:/usr/local/cuda-11.4/bin:/home/nvidia/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('LANG', 'C.UTF-8'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('JETSON_SOC', 'tegra194'), ('AMENT_PREFIX_PATH', '/opt/ros/foxy'), ('SHELL', '/bin/bash'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('JETSON_CUDA_ARCH_BIN', '7.2'), ('PWD', '/home/nvidia/master_ws/build/plane_fitter'), ('SSH_CONNECTION', '192.168.50.129 64515 192.168.50.38 22'), ('XDG_DATA_DIRS', '/usr/local/share:/usr/share:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/foxy/lib/python3.8/site-packages'), ('COLCON', '1'), ('JETSON_JETPACK', '5.1.1'), ('JETSON_P_NUMBER', 'p3668-0001'), ('CMAKE_PREFIX_PATH', '/opt/ros/foxy')]), 'shell': False}
[0.098755] (-) TimerEvent: {}
[0.200452] (-) TimerEvent: {}
[0.293657] (plane_fitter) StdoutLine: {'line': b'\x1b[35m\x1b[1mScanning dependencies of target plane_fitter\x1b[0m\n'}
[0.300675] (-) TimerEvent: {}
[0.402749] (-) TimerEvent: {}
[0.503721] (-) TimerEvent: {}
[0.604691] (plane_fitter) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/plane_fitter.dir/src/plane_fitter.cpp.o\x1b[0m\n'}
[0.605620] (-) TimerEvent: {}
[0.706492] (-) TimerEvent: {}
[0.807433] (-) TimerEvent: {}
[0.908432] (-) TimerEvent: {}
[1.009476] (-) TimerEvent: {}
[1.110536] (-) TimerEvent: {}
[1.211510] (-) TimerEvent: {}
[1.312943] (-) TimerEvent: {}
[1.414179] (-) TimerEvent: {}
[1.515936] (-) TimerEvent: {}
[1.617546] (-) TimerEvent: {}
[1.719146] (-) TimerEvent: {}
[1.820166] (-) TimerEvent: {}
[1.921116] (-) TimerEvent: {}
[2.022155] (-) TimerEvent: {}
[2.123274] (-) TimerEvent: {}
[2.224304] (-) TimerEvent: {}
[2.325311] (-) TimerEvent: {}
[2.426314] (-) TimerEvent: {}
[2.527383] (-) TimerEvent: {}
[2.628475] (-) TimerEvent: {}
[2.729514] (-) TimerEvent: {}
[2.830605] (-) TimerEvent: {}
[2.931689] (-) TimerEvent: {}
[3.032763] (-) TimerEvent: {}
[3.133778] (-) TimerEvent: {}
[3.235017] (-) TimerEvent: {}
[3.336003] (-) TimerEvent: {}
[3.437016] (-) TimerEvent: {}
[3.538059] (-) TimerEvent: {}
[3.639195] (-) TimerEvent: {}
[3.740193] (-) TimerEvent: {}
[3.841196] (-) TimerEvent: {}
[3.942213] (-) TimerEvent: {}
[4.043272] (-) TimerEvent: {}
[4.144298] (-) TimerEvent: {}
[4.245366] (-) TimerEvent: {}
[4.346537] (-) TimerEvent: {}
[4.447604] (-) TimerEvent: {}
[4.548767] (-) TimerEvent: {}
[4.649850] (-) TimerEvent: {}
[4.750987] (-) TimerEvent: {}
[4.852231] (-) TimerEvent: {}
[4.953385] (-) TimerEvent: {}
[5.054578] (-) TimerEvent: {}
[5.155697] (-) TimerEvent: {}
[5.257142] (-) TimerEvent: {}
[5.358933] (-) TimerEvent: {}
[5.460030] (-) TimerEvent: {}
[5.562567] (-) TimerEvent: {}
[5.663602] (-) TimerEvent: {}
[5.764635] (-) TimerEvent: {}
[5.865705] (-) TimerEvent: {}
[5.967411] (-) TimerEvent: {}
[6.069660] (-) TimerEvent: {}
[6.171440] (-) TimerEvent: {}
[6.273116] (-) TimerEvent: {}
[6.374898] (-) TimerEvent: {}
[6.478658] (-) TimerEvent: {}
[6.579672] (-) TimerEvent: {}
[6.681588] (-) TimerEvent: {}
[6.782623] (-) TimerEvent: {}
[6.884341] (-) TimerEvent: {}
[6.986160] (-) TimerEvent: {}
[7.087302] (-) TimerEvent: {}
[7.188366] (-) TimerEvent: {}
[7.289579] (-) TimerEvent: {}
[7.390850] (-) TimerEvent: {}
[7.491945] (-) TimerEvent: {}
[7.593924] (-) TimerEvent: {}
[7.695165] (-) TimerEvent: {}
[7.796351] (-) TimerEvent: {}
[7.897527] (-) TimerEvent: {}
[7.998621] (-) TimerEvent: {}
[8.099816] (-) TimerEvent: {}
[8.201143] (-) TimerEvent: {}
[8.302169] (-) TimerEvent: {}
[8.403463] (-) TimerEvent: {}
[8.504587] (-) TimerEvent: {}
[8.605774] (-) TimerEvent: {}
[8.707037] (-) TimerEvent: {}
[8.808262] (-) TimerEvent: {}
[8.909440] (-) TimerEvent: {}
[9.010633] (-) TimerEvent: {}
[9.112448] (-) TimerEvent: {}
[9.214178] (-) TimerEvent: {}
[9.315466] (-) TimerEvent: {}
[9.416524] (-) TimerEvent: {}
[9.517648] (-) TimerEvent: {}
[9.618911] (-) TimerEvent: {}
[9.720024] (-) TimerEvent: {}
[9.821153] (-) TimerEvent: {}
[9.922334] (-) TimerEvent: {}
[10.023595] (-) TimerEvent: {}
[10.125112] (-) TimerEvent: {}
[10.226210] (-) TimerEvent: {}
[10.327436] (-) TimerEvent: {}
[10.428564] (-) TimerEvent: {}
[10.529670] (-) TimerEvent: {}
[10.631640] (-) TimerEvent: {}
[10.733011] (-) TimerEvent: {}
[10.834077] (-) TimerEvent: {}
[10.935449] (-) TimerEvent: {}
[11.036646] (-) TimerEvent: {}
[11.137861] (-) TimerEvent: {}
[11.239094] (-) TimerEvent: {}
[11.340250] (-) TimerEvent: {}
[11.441347] (-) TimerEvent: {}
[11.542486] (-) TimerEvent: {}
[11.643572] (-) TimerEvent: {}
[11.744868] (-) TimerEvent: {}
[11.846695] (-) TimerEvent: {}
[11.947728] (-) TimerEvent: {}
[12.048856] (-) TimerEvent: {}
[12.149965] (-) TimerEvent: {}
[12.251393] (-) TimerEvent: {}
[12.354661] (-) TimerEvent: {}
[12.455770] (-) TimerEvent: {}
[12.557463] (-) TimerEvent: {}
[12.659356] (-) TimerEvent: {}
[12.761072] (-) TimerEvent: {}
[12.862885] (-) TimerEvent: {}
[12.964505] (-) TimerEvent: {}
[13.066276] (-) TimerEvent: {}
[13.168033] (-) TimerEvent: {}
[13.269740] (-) TimerEvent: {}
[13.371505] (-) TimerEvent: {}
[13.473154] (-) TimerEvent: {}
[13.574872] (-) TimerEvent: {}
[13.676552] (-) TimerEvent: {}
[13.778243] (-) TimerEvent: {}
[13.880008] (-) TimerEvent: {}
[13.981770] (-) TimerEvent: {}
[14.083548] (-) TimerEvent: {}
[14.185411] (-) TimerEvent: {}
[14.286823] (-) TimerEvent: {}
[14.387924] (-) TimerEvent: {}
[14.488987] (-) TimerEvent: {}
[14.590089] (-) TimerEvent: {}
[14.691241] (-) TimerEvent: {}
[14.792347] (-) TimerEvent: {}
[14.894483] (-) TimerEvent: {}
[14.996122] (-) TimerEvent: {}
[15.097856] (-) TimerEvent: {}
[15.199798] (-) TimerEvent: {}
[15.301703] (-) TimerEvent: {}
[15.402855] (-) TimerEvent: {}
[15.504070] (-) TimerEvent: {}
[15.605150] (-) TimerEvent: {}
[15.707607] (-) TimerEvent: {}
[15.809357] (-) TimerEvent: {}
[15.911145] (-) TimerEvent: {}
[16.012821] (-) TimerEvent: {}
[16.114693] (-) TimerEvent: {}
[16.216374] (-) TimerEvent: {}
[16.318216] (-) TimerEvent: {}
[16.419908] (-) TimerEvent: {}
[16.521592] (-) TimerEvent: {}
[16.622647] (-) TimerEvent: {}
[16.723686] (-) TimerEvent: {}
[16.826705] (-) TimerEvent: {}
[16.928748] (-) TimerEvent: {}
[17.030328] (-) TimerEvent: {}
[17.132053] (-) TimerEvent: {}
[17.233756] (-) TimerEvent: {}
[17.335644] (-) TimerEvent: {}
[17.437367] (-) TimerEvent: {}
[17.539266] (-) TimerEvent: {}
[17.641025] (-) TimerEvent: {}
[17.742892] (-) TimerEvent: {}
[17.844586] (-) TimerEvent: {}
[17.946314] (-) TimerEvent: {}
[18.048121] (-) TimerEvent: {}
[18.149849] (-) TimerEvent: {}
[18.251731] (-) TimerEvent: {}
[18.354138] (-) TimerEvent: {}
[18.455837] (-) TimerEvent: {}
[18.557505] (-) TimerEvent: {}
[18.659249] (-) TimerEvent: {}
[18.760972] (-) TimerEvent: {}
[18.862076] (-) TimerEvent: {}
[18.963294] (-) TimerEvent: {}
[19.064353] (-) TimerEvent: {}
[19.165458] (-) TimerEvent: {}
[19.266519] (-) TimerEvent: {}
[19.368087] (-) TimerEvent: {}
[19.469637] (-) TimerEvent: {}
[19.571255] (-) TimerEvent: {}
[19.673024] (-) TimerEvent: {}
[19.774276] (-) TimerEvent: {}
[19.876110] (-) TimerEvent: {}
[19.977215] (-) TimerEvent: {}
[20.078324] (-) TimerEvent: {}
[20.179506] (-) TimerEvent: {}
[20.280572] (-) TimerEvent: {}
[20.381950] (-) TimerEvent: {}
[20.483788] (-) TimerEvent: {}
[20.585568] (-) TimerEvent: {}
[20.687338] (-) TimerEvent: {}
[20.789036] (-) TimerEvent: {}
[20.890835] (-) TimerEvent: {}
[20.992570] (-) TimerEvent: {}
[21.094237] (-) TimerEvent: {}
[21.196049] (-) TimerEvent: {}
[21.297793] (-) TimerEvent: {}
[21.399095] (-) TimerEvent: {}
[21.500307] (-) TimerEvent: {}
[21.602067] (-) TimerEvent: {}
[21.620273] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/home/nvidia/master_ws/src/plane_fitter/src/plane_fitter.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid pointCloudPlaneFitter::splitPointCloud(sensor_msgs::msg::PointCloud2_<std::allocator<void> >::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[21.629590] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/home/nvidia/master_ws/src/plane_fitter/src/plane_fitter.cpp:156:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Publisher<std_msgs::msg::Float64MultiArray_<std::allocator<void> > >::publish(pcl::PointCloud<pcl::PointXYZ>::Ptr&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.630302] (plane_fitter) StderrLine: {'line': b'  156 |             publisher_feature_mid_->publish(cloud_mid\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[21.631647] (plane_fitter) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[21.632133] (plane_fitter) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/topic_statistics/subscription_topic_statistics.hpp:31\x1b[m\x1b[K,\n'}
[21.632489] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/subscription.hpp:50\x1b[m\x1b[K,\n'}
[21.632918] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[21.633247] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/memory_strategy.hpp:24\x1b[m\x1b[K,\n'}
[21.633560] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[21.633968] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[21.634286] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executor.hpp:33\x1b[m\x1b[K,\n'}
[21.634919] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[21.635356] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[21.635687] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/rclcpp.hpp:146\x1b[m\x1b[K,\n'}
[21.636056] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/nvidia/master_ws/src/plane_fitter/src/plane_fitter.cpp:8\x1b[m\x1b[K:\n'}
[21.636414] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:185:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(std::unique_ptr<MessageT, typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type>) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>; typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type = std::default_delete<std_msgs::msg::Float64MultiArray_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.636824] (plane_fitter) StderrLine: {'line': b'  185 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(std::unique_ptr<MessageT, MessageDeleter> msg)\n'}
[21.637154] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.637468] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:185:53:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<std_msgs::msg::Float64MultiArray_<std::allocator<void> >, std::default_delete<std_msgs::msg::Float64MultiArray_<std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.637864] (plane_fitter) StderrLine: {'line': b'  185 |   publish(\x1b[01;36m\x1b[Kstd::unique_ptr<MessageT, MessageDeleter> msg\x1b[m\x1b[K)\n'}
[21.638262] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[21.638775] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:209:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const MessageT&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.639139] (plane_fitter) StderrLine: {'line': b'  209 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const MessageT & msg)\n'}
[21.639470] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.639829] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:209:28:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std_msgs::msg::Float64MultiArray_<std::allocator<void> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.640222] (plane_fitter) StderrLine: {'line': b'  209 |   publish(\x1b[01;36m\x1b[Kconst MessageT & msg\x1b[m\x1b[K)\n'}
[21.640572] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[21.640876] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:226:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rcl_serialized_message_t&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>; rcl_serialized_message_t = rcutils_uint8_array_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.641238] (plane_fitter) StderrLine: {'line': b'  226 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const rcl_serialized_message_t & serialized_msg)\n'}
[21.641542] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.641856] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:226:44:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rcl_serialized_message_t&\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kconst rcutils_uint8_array_t&\x1b[m\x1b[K\xe2\x80\x99}\n'}
[21.642196] (plane_fitter) StderrLine: {'line': b'  226 |   publish(\x1b[01;36m\x1b[Kconst rcl_serialized_message_t & serialized_msg\x1b[m\x1b[K)\n'}
[21.642599] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[21.642918] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:232:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rclcpp::SerializedMessage&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.643287] (plane_fitter) StderrLine: {'line': b'  232 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const SerializedMessage & serialized_msg)\n'}
[21.643635] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.643947] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:232:37:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::SerializedMessage&\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.644342] (plane_fitter) StderrLine: {'line': b'  232 |   publish(\x1b[01;36m\x1b[Kconst SerializedMessage & serialized_msg\x1b[m\x1b[K)\n'}
[21.644638] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[21.644935] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:246:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(rclcpp::LoanedMessage<MessageT, AllocatorT>&&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.645255] (plane_fitter) StderrLine: {'line': b'  246 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(rclcpp::LoanedMessage<MessageT, AllocatorT> && loaned_msg)\n'}
[21.645595] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.645883] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:246:58:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::LoanedMessage<std_msgs::msg::Float64MultiArray_<std::allocator<void> >, std::allocator<void> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.646181] (plane_fitter) StderrLine: {'line': b'  246 |   publish(\x1b[01;36m\x1b[Krclcpp::LoanedMessage<MessageT, AllocatorT> && loaned_msg\x1b[m\x1b[K)\n'}
[21.646587] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[21.646928] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/home/nvidia/master_ws/src/plane_fitter/src/plane_fitter.cpp:157:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Publisher<std_msgs::msg::Float64MultiArray_<std::allocator<void> > >::publish(pcl::PointCloud<pcl::PointXYZ>::Ptr&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.647335] (plane_fitter) StderrLine: {'line': b'  157 |             publisher_feature_left_->publish(cloud_left\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[21.647704] (plane_fitter) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[21.647995] (plane_fitter) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/topic_statistics/subscription_topic_statistics.hpp:31\x1b[m\x1b[K,\n'}
[21.648290] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/subscription.hpp:50\x1b[m\x1b[K,\n'}
[21.648616] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[21.648960] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/memory_strategy.hpp:24\x1b[m\x1b[K,\n'}
[21.649326] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[21.649672] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[21.649995] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executor.hpp:33\x1b[m\x1b[K,\n'}
[21.650293] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[21.651368] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[21.651863] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/rclcpp.hpp:146\x1b[m\x1b[K,\n'}
[21.652203] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/nvidia/master_ws/src/plane_fitter/src/plane_fitter.cpp:8\x1b[m\x1b[K:\n'}
[21.652535] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:185:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(std::unique_ptr<MessageT, typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type>) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>; typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type = std::default_delete<std_msgs::msg::Float64MultiArray_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.652933] (plane_fitter) StderrLine: {'line': b'  185 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(std::unique_ptr<MessageT, MessageDeleter> msg)\n'}
[21.653247] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.653566] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:185:53:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<std_msgs::msg::Float64MultiArray_<std::allocator<void> >, std::default_delete<std_msgs::msg::Float64MultiArray_<std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.653892] (plane_fitter) StderrLine: {'line': b'  185 |   publish(\x1b[01;36m\x1b[Kstd::unique_ptr<MessageT, MessageDeleter> msg\x1b[m\x1b[K)\n'}
[21.654190] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[21.654610] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:209:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const MessageT&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.655115] (plane_fitter) StderrLine: {'line': b'  209 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const MessageT & msg)\n'}
[21.656663] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.658259] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:209:28:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std_msgs::msg::Float64MultiArray_<std::allocator<void> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.660072] (plane_fitter) StderrLine: {'line': b'  209 |   publish(\x1b[01;36m\x1b[Kconst MessageT & msg\x1b[m\x1b[K)\n'}
[21.663371] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[21.665806] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:226:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rcl_serialized_message_t&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>; rcl_serialized_message_t = rcutils_uint8_array_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.666455] (plane_fitter) StderrLine: {'line': b'  226 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const rcl_serialized_message_t & serialized_msg)\n'}
[21.666896] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.667316] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:226:44:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rcl_serialized_message_t&\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kconst rcutils_uint8_array_t&\x1b[m\x1b[K\xe2\x80\x99}\n'}
[21.667816] (plane_fitter) StderrLine: {'line': b'  226 |   publish(\x1b[01;36m\x1b[Kconst rcl_serialized_message_t & serialized_msg\x1b[m\x1b[K)\n'}
[21.670735] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[21.671414] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:232:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rclcpp::SerializedMessage&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.671841] (plane_fitter) StderrLine: {'line': b'  232 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const SerializedMessage & serialized_msg)\n'}
[21.672213] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.672632] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:232:37:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::SerializedMessage&\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.672989] (plane_fitter) StderrLine: {'line': b'  232 |   publish(\x1b[01;36m\x1b[Kconst SerializedMessage & serialized_msg\x1b[m\x1b[K)\n'}
[21.673312] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[21.673688] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:246:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(rclcpp::LoanedMessage<MessageT, AllocatorT>&&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.674048] (plane_fitter) StderrLine: {'line': b'  246 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(rclcpp::LoanedMessage<MessageT, AllocatorT> && loaned_msg)\n'}
[21.674451] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.674827] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:246:58:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::LoanedMessage<std_msgs::msg::Float64MultiArray_<std::allocator<void> >, std::allocator<void> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.675290] (plane_fitter) StderrLine: {'line': b'  246 |   publish(\x1b[01;36m\x1b[Krclcpp::LoanedMessage<MessageT, AllocatorT> && loaned_msg\x1b[m\x1b[K)\n'}
[21.675596] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[21.675936] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/home/nvidia/master_ws/src/plane_fitter/src/plane_fitter.cpp:158:58:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Publisher<std_msgs::msg::Float64MultiArray_<std::allocator<void> > >::publish(pcl::PointCloud<pcl::PointXYZ>::Ptr&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.676306] (plane_fitter) StderrLine: {'line': b'  158 |             publisher_feature_right_->publish(cloud_right\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[21.676620] (plane_fitter) StderrLine: {'line': b'      |                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[21.676942] (plane_fitter) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/topic_statistics/subscription_topic_statistics.hpp:31\x1b[m\x1b[K,\n'}
[21.677313] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/subscription.hpp:50\x1b[m\x1b[K,\n'}
[21.677683] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[21.678013] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/memory_strategy.hpp:24\x1b[m\x1b[K,\n'}
[21.678333] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[21.678751] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[21.679144] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executor.hpp:33\x1b[m\x1b[K,\n'}
[21.679466] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors/multi_threaded_executor.hpp:26\x1b[m\x1b[K,\n'}
[21.680017] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[21.680353] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/rclcpp.hpp:146\x1b[m\x1b[K,\n'}
[21.680709] (plane_fitter) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/nvidia/master_ws/src/plane_fitter/src/plane_fitter.cpp:8\x1b[m\x1b[K:\n'}
[21.681472] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:185:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(std::unique_ptr<MessageT, typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type>) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>; typename std::conditional<std::is_same<typename std::allocator_traits<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type>::rebind_alloc<MessageT>, typename std::allocator<void>::rebind<_Tp1>::other>::value, std::default_delete<_Tp>, rclcpp::allocator::AllocatorDeleter<typename std::allocator_traits<_Alloc>::rebind_traits<MessageT>::allocator_type> >::type = std::default_delete<std_msgs::msg::Float64MultiArray_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.682034] (plane_fitter) StderrLine: {'line': b'  185 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(std::unique_ptr<MessageT, MessageDeleter> msg)\n'}
[21.682466] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.682820] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:185:53:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<std_msgs::msg::Float64MultiArray_<std::allocator<void> >, std::default_delete<std_msgs::msg::Float64MultiArray_<std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.683175] (plane_fitter) StderrLine: {'line': b'  185 |   publish(\x1b[01;36m\x1b[Kstd::unique_ptr<MessageT, MessageDeleter> msg\x1b[m\x1b[K)\n'}
[21.683529] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[21.683856] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:209:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const MessageT&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.684191] (plane_fitter) StderrLine: {'line': b'  209 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const MessageT & msg)\n'}
[21.684680] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.685070] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:209:28:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std_msgs::msg::Float64MultiArray_<std::allocator<void> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.685439] (plane_fitter) StderrLine: {'line': b'  209 |   publish(\x1b[01;36m\x1b[Kconst MessageT & msg\x1b[m\x1b[K)\n'}
[21.685741] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[21.686070] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:226:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rcl_serialized_message_t&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>; rcl_serialized_message_t = rcutils_uint8_array_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.686718] (plane_fitter) StderrLine: {'line': b'  226 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const rcl_serialized_message_t & serialized_msg)\n'}
[21.687049] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.687369] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:226:44:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rcl_serialized_message_t&\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kconst rcutils_uint8_array_t&\x1b[m\x1b[K\xe2\x80\x99}\n'}
[21.687780] (plane_fitter) StderrLine: {'line': b'  226 |   publish(\x1b[01;36m\x1b[Kconst rcl_serialized_message_t & serialized_msg\x1b[m\x1b[K)\n'}
[21.688120] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[21.688435] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:232:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(const rclcpp::SerializedMessage&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.688753] (plane_fitter) StderrLine: {'line': b'  232 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(const SerializedMessage & serialized_msg)\n'}
[21.689106] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.689444] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:232:37:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst rclcpp::SerializedMessage&\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.689848] (plane_fitter) StderrLine: {'line': b'  232 |   publish(\x1b[01;36m\x1b[Kconst SerializedMessage & serialized_msg\x1b[m\x1b[K)\n'}
[21.690153] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[21.690626] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:246:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Publisher<MessageT, AllocatorT>::publish(rclcpp::LoanedMessage<MessageT, AllocatorT>&&) [with MessageT = std_msgs::msg::Float64MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.690974] (plane_fitter) StderrLine: {'line': b'  246 |   \x1b[01;36m\x1b[Kpublish\x1b[m\x1b[K(rclcpp::LoanedMessage<MessageT, AllocatorT> && loaned_msg)\n'}
[21.691265] (plane_fitter) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[21.691596] (plane_fitter) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/foxy/include/rclcpp/publisher.hpp:246:58:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kpcl::PointCloud<pcl::PointXYZ>::Ptr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::LoanedMessage<std_msgs::msg::Float64MultiArray_<std::allocator<void> >, std::allocator<void> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[21.691976] (plane_fitter) StderrLine: {'line': b'  246 |   publish(\x1b[01;36m\x1b[Krclcpp::LoanedMessage<MessageT, AllocatorT> && loaned_msg\x1b[m\x1b[K)\n'}
[21.692275] (plane_fitter) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\x1b[m\x1b[K\n'}
[21.702283] (-) TimerEvent: {}
[21.803471] (-) TimerEvent: {}
[21.904616] (-) TimerEvent: {}
[22.005767] (-) TimerEvent: {}
[22.106978] (-) TimerEvent: {}
[22.208250] (-) TimerEvent: {}
[22.309573] (-) TimerEvent: {}
[22.411881] (-) TimerEvent: {}
[22.513052] (-) TimerEvent: {}
[22.614190] (-) TimerEvent: {}
[22.715320] (-) TimerEvent: {}
[22.816473] (-) TimerEvent: {}
[22.917986] (-) TimerEvent: {}
[23.019173] (-) TimerEvent: {}
[23.120477] (-) TimerEvent: {}
[23.222324] (-) TimerEvent: {}
[23.323586] (-) TimerEvent: {}
[23.424739] (-) TimerEvent: {}
[23.525898] (-) TimerEvent: {}
[23.627119] (-) TimerEvent: {}
[23.728330] (-) TimerEvent: {}
[23.829381] (-) TimerEvent: {}
[23.930519] (-) TimerEvent: {}
[24.032006] (-) TimerEvent: {}
[24.133014] (-) TimerEvent: {}
[24.234022] (-) TimerEvent: {}
[24.335305] (-) TimerEvent: {}
[24.436213] (-) TimerEvent: {}
[24.537130] (-) TimerEvent: {}
[24.638097] (-) TimerEvent: {}
[24.739141] (-) TimerEvent: {}
[24.840082] (-) TimerEvent: {}
[24.941040] (-) TimerEvent: {}
[25.042175] (-) TimerEvent: {}
[25.143341] (-) TimerEvent: {}
[25.244374] (-) TimerEvent: {}
[25.345492] (-) TimerEvent: {}
[25.446641] (-) TimerEvent: {}
[25.547780] (-) TimerEvent: {}
[25.648976] (-) TimerEvent: {}
[25.750880] (-) TimerEvent: {}
[25.852542] (-) TimerEvent: {}
[25.954331] (-) TimerEvent: {}
[26.056525] (-) TimerEvent: {}
[26.158536] (-) TimerEvent: {}
[26.260329] (-) TimerEvent: {}
[26.361536] (-) TimerEvent: {}
[26.462838] (-) TimerEvent: {}
[26.563998] (-) TimerEvent: {}
[26.665299] (-) TimerEvent: {}
[26.766751] (-) TimerEvent: {}
[26.868152] (-) TimerEvent: {}
[26.969412] (-) TimerEvent: {}
[27.070947] (-) TimerEvent: {}
[27.172162] (-) TimerEvent: {}
[27.273374] (-) TimerEvent: {}
[27.374813] (-) TimerEvent: {}
[27.477130] (-) TimerEvent: {}
[27.578555] (-) TimerEvent: {}
[27.679746] (-) TimerEvent: {}
[27.781452] (-) TimerEvent: {}
[27.882836] (-) TimerEvent: {}
[27.984311] (-) TimerEvent: {}
[28.086225] (-) TimerEvent: {}
[28.187585] (-) TimerEvent: {}
[28.288873] (-) TimerEvent: {}
[28.390659] (-) TimerEvent: {}
[28.492327] (-) TimerEvent: {}
[28.593506] (-) TimerEvent: {}
[28.694963] (-) TimerEvent: {}
[28.796147] (-) TimerEvent: {}
[28.897279] (-) TimerEvent: {}
[28.998469] (-) TimerEvent: {}
[29.100086] (-) TimerEvent: {}
[29.201955] (-) TimerEvent: {}
[29.304119] (-) TimerEvent: {}
[29.405643] (-) TimerEvent: {}
[29.507485] (-) TimerEvent: {}
[29.609239] (-) TimerEvent: {}
[29.710882] (-) TimerEvent: {}
[29.812471] (-) TimerEvent: {}
[29.913853] (-) TimerEvent: {}
[30.015462] (-) TimerEvent: {}
[30.116732] (-) TimerEvent: {}
[30.136277] (plane_fitter) StderrLine: {'line': b'make[2]: *** [CMakeFiles/plane_fitter.dir/build.make:63: CMakeFiles/plane_fitter.dir/src/plane_fitter.cpp.o] Error 1\n'}
[30.138052] (plane_fitter) StderrLine: {'line': b'make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/plane_fitter.dir/all] Error 2\n'}
[30.138855] (plane_fitter) StderrLine: {'line': b'make: *** [Makefile:141: all] Error 2\n'}
[30.147819] (plane_fitter) CommandEnded: {'returncode': 2}
[30.217301] (-) TimerEvent: {}
[30.320876] (-) TimerEvent: {}
[30.328977] (plane_fitter) JobEnded: {'identifier': 'plane_fitter', 'rc': 2}
[30.344733] (-) EventReactorShutdown: {}
